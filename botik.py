import pip
pip.main(['install', 'pytelegrambotapi'])
import telebot
from telebot import types
import sqlite3
import time
import logging
bot = telebot.TeleBot('TOKEN_BOTA', skip_pending=True)
logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)
users_data = {}

conn = sqlite3.connect('clubs.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS clubs
             (club_name text, cups_required integer, admin_id integer)''')
c.execute('''CREATE TABLE IF NOT EXISTS users
             (user_id integer PRIMARY KEY, username text, club text)''')
c.execute('''CREATE TABLE IF NOT EXISTS user_photos
             (user_id integer, photo_id integer)''')
conn.close()

conn = sqlite3.connect('clubs.db')
c = conn.cursor()
clubs = c.execute("SELECT * FROM clubs").fetchall()
conn.close()

selected_club = {}
last_photo_time = {}


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    username = message.chat.username

    if user_id == bot.get_me().id:
        return
    with sqlite3.connect('clubs.db') as conn:
        c = conn.cursor()
        clubs = c.execute("SELECT * FROM clubs").fetchall()
    keyboard = types.InlineKeyboardMarkup()
    for i in range(0, len(clubs), 2):
        buttons = [types.InlineKeyboardButton(club[0], callback_data=club[0]) for club in clubs[i:i+2]]
        keyboard.add(*buttons)
    caption = '‚ú®–í—ã–±–µ—Ä–∏ –∫–ª—É–±, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É‚ú® \n \n –ù–∞—à–∏ –∫–ª—É–±—ã:\n'
    for club in clubs:
        caption += f"‚Äî\n{club[0]} Wallace: \n–í—Ö–æ–¥: {club[1]}üèÜ\n"
#–í–º–µ—Å—Ç–æ photo_tut –Ω–∞–¥–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥–µ–π—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    bot.send_photo(message.chat.id, 'Photo_TUT', caption=caption, reply_markup=keyboard)

@bot.message_handler(commands=['setlimit'])
def set_limit(message):
    user_id = message.chat.id
    with sqlite3.connect('clubs.db') as conn:
        c = conn.cursor()
        club = c.execute("SELECT * FROM clubs WHERE admin_id = ?", (user_id,)).fetchone()
    if club is not None:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –∫—É–±–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª—É–±–∞.")
        bot.register_next_step_handler(message, update_limit, club[0])
    else:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∫–ª—É–±–∞.")
        conn.commit()
        conn.close()

def update_limit(message, club_name):
    try:
        new_limit = int(message.text)
        with sqlite3.connect('clubs.db') as conn:
            c = conn.cursor()
            c.execute("UPDATE clubs SET cups_required = ? WHERE club_name = ?", (new_limit, club_name))
        bot.send_message(message.chat.id, f"–õ–∏–º–∏—Ç –∫—É–±–∫–æ–≤ –¥–ª—è –∫–ª—É–±–∞ {club_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_limit}.")
    except ValueError:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        conn.commit()
        conn.close()

#ID_Admina –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã—Ö –≤–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤–∞—Å –∏ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è, –∏–ª–∏ –∂–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π ID
admin_ids = [ID_Admina_One, ID_Admina_Two]

selected_club_to_change_admin = {}
selected_club_to_delete = {}
changing_admin = {}
new_club_info = {}
selected_club_to_change_name = {}
message_to_delete = {}
@bot.message_handler(commands=['login228'])
def login(message):
    if message.from_user.id in admin_ids:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–ª—É–±–∞", callback_data="change_admin"))
        keyboard.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞", callback_data="change_name"))
        keyboard.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—É–±", callback_data="add_club"))
        keyboard.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–ª—É–±", callback_data="delete_club"))
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—É–±–∞–º–∏.\n–ü–∏–¥–æ—Ä–∞—Å.", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


def get_new_club_name(message):
    new_club_info[message.chat.id] = {"name": message.text}
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—É–±–∞.\n/login228")
    bot.register_next_step_handler(message, get_new_club_cups)

def get_new_club_cups(message):
    new_club_info[message.chat.id]["cups"] = int(message.text)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—É–±–∞.\n/login228")
    bot.register_next_step_handler(message, get_new_club_admin)

def get_new_club_admin(message):
    new_club_info[message.chat.id]["admin_id"] = int(message.text)
    with sqlite3.connect('clubs.db') as conn:
        c = conn.cursor()
        c.execute("INSERT INTO clubs (club_name, cups_required, admin_id) VALUES (?, ?, ?)", (new_club_info[message.chat.id]["name"], new_club_info[message.chat.id]["cups"], new_club_info[message.chat.id]["admin_id"]))
    bot.send_message(message.chat.id, f"–ù–æ–≤—ã–π –∫–ª—É–± {new_club_info[message.chat.id]['name']} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n/login228")
    del new_club_info[message.chat.id]
    conn.commit()
    conn.close()

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "change_admin":
        changing_admin[call.message.chat.id] = True
        with sqlite3.connect('clubs.db') as conn:
            c = conn.cursor()
            clubs = c.execute("SELECT * FROM clubs").fetchall()
        keyboard = types.InlineKeyboardMarkup()
        for club in clubs:
            keyboard.add(types.InlineKeyboardButton(club[0], callback_data=f"select_{club[0]}"))
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.", reply_markup=keyboard)
    elif call.data.startswith("select_") and call.message.chat.id in changing_admin:
        selected_club_to_change_admin[call.message.chat.id] = call.data.split("_")[1]
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n/login228")
    elif call.data == "delete_club":
        with sqlite3.connect('clubs.db') as conn:
            c = conn.cursor()
            clubs = c.execute("SELECT * FROM clubs").fetchall()
        keyboard = types.InlineKeyboardMarkup()
        for club in clubs:
            keyboard.add(types.InlineKeyboardButton(club[0], callback_data=f"select_delete_{club[0]}"))
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.", reply_markup=keyboard)
    elif call.data.startswith("select_delete_"):
        selected_club_to_delete[call.message.chat.id] = call.data.split("_")[2]
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–î–∞", callback_data="confirm_delete"))
        keyboard.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_delete"))
        bot.send_message(call.message.chat.id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª—É–± {selected_club_to_delete[call.message.chat.id]}?", reply_markup=keyboard)
    elif call.data == "confirm_delete":
        with sqlite3.connect('clubs.db') as conn:
            c = conn.cursor()
            c.execute("DELETE FROM clubs WHERE club_name = ?", (selected_club_to_delete[call.message.chat.id],))
        bot.send_message(call.message.chat.id, f"–ö–ª—É–± {selected_club_to_delete[call.message.chat.id]} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n/login228")
        del selected_club_to_delete[call.message.chat.id]
    elif call.data == "cancel_delete":
        bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—É–±–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n/login228")
        del selected_club_to_delete[call.message.chat.id]
    if call.data == "add_club":
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—É–±–∞.")
        bot.register_next_step_handler(call.message, get_new_club_name)
    with sqlite3.connect('clubs.db') as conn:
        c = conn.cursor()
        clubs = c.execute("SELECT * FROM clubs").fetchall()
        if call.data in [club[0] for club in clubs]:
            selected_club[call.message.chat.id] = call.data
            c.execute("UPDATE users SET club = ? WHERE user_id = ?", (call.data, call.message.chat.id))
            bot.delete_message(call.message.chat.id, call.message.message_id)
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª—É–±–µ
            club_info = c.execute("SELECT * FROM clubs WHERE club_name = ?", (call.data,)).fetchone()
            club_name = club_info[0]
            club_limit = club_info[1]
            bot.send_message(call.message.chat.id, f"{club_name} –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä!\n–í—Ö–æ–¥: {club_limit}üèÜ \n–ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
        elif call.data.startswith("accept"):
            user_id = call.data.split("_")[1]
            bot.send_message(user_id, "‚úÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –∫–ª—É–±!")
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–π—Ç–∏–ª–∏ –µ–≥–æ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ...")
        elif call.data.startswith("reject"):
            user_id = call.data.split("_")[1]
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
            bot.register_next_step_handler(call.message, reject_reason, user_id)
        elif call.data == "start":
            send_welcome(call.message)
        elif call.data == "change_photo":
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        elif call.data == "change_club":
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send_welcome(call.message)
    if call.data == "change_name":
        with sqlite3.connect('clubs.db') as conn:
            c = conn.cursor()
            clubs = c.execute("SELECT * FROM clubs").fetchall()
        keyboard = types.InlineKeyboardMarkup()
        for club in clubs:
            keyboard.add(types.InlineKeyboardButton(club[0], callback_data=f"select_name_{club[0]}"))
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.", reply_markup=keyboard)
    elif call.data.startswith("select_name_"):
        selected_club_to_change_name[call.message.chat.id] = call.data.split("_")[2]
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞.")
    if call.data.startswith("send_"):
        user_id = int(call.data.split('_')[1])
        with sqlite3.connect('clubs.db') as conn:
            c = conn.cursor()
            photo_id = c.execute("SELECT photo_id FROM user_photos WHERE user_id = ?", (user_id,)).fetchone()[0]
            for club in clubs:
                if club[0] == selected_club[call.message.chat.id]:
                    bot.send_photo(club[2], photo_id, f"{club[0]}\n–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞: @{call.from_user.username}\nID: tg://openmessage?user_id={user_id}")
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}"),
                               types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}"))
                    bot.send_message(club[2], "–ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å?", reply_markup=markup)
            bot.send_message(call.message.chat.id, f"‚úÖ–°–ø–∞—Å–∏–±–æ! \n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —Å–∫–æ—Ä–æ –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç.‚ù§Ô∏è")
            if call.message.chat.id in message_to_delete:
                bot.delete_message(chat_id=call.message.chat.id, message_id=message_to_delete[call.message.chat.id])
                del message_to_delete[call.message.chat.id]
            if call.data.startswith("change_"):
                user_id = int(call.data.split('_')[1])
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")

@bot.message_handler(func=lambda message: message.chat.id in selected_club_to_change_name)
def change_club_name(message):
    new_club_name = message.text
    with sqlite3.connect('clubs.db') as conn:
        c = conn.cursor()
        c.execute("UPDATE clubs SET club_name = ? WHERE club_name = ?", (new_club_name, selected_club_to_change_name[message.chat.id]))
    bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞ {selected_club_to_change_name[message.chat.id]} –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_club_name}.\n/login228")
    del selected_club_to_change_name[message.chat.id]

@bot.message_handler(func=lambda message: message.chat.id in selected_club_to_change_admin)
def change_admin(message):
    new_admin_id = int(message.text)
    with sqlite3.connect('clubs.db') as conn:
        c = conn.cursor()
        c.execute("UPDATE clubs SET admin_id = ? WHERE club_name = ?", (new_admin_id, selected_club_to_change_admin[message.chat.id]))
    bot.send_message(message.chat.id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–ª—É–±–∞ {selected_club_to_change_admin[message.chat.id]} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ tg://openmessage?user_id={new_admin_id}.\n/login228")
    del selected_club_to_change_admin[message.chat.id]


def reject_reason(message, user_id):
    with sqlite3.connect('clubs.db') as conn:
        c = conn.cursor()
        user = c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)).fetchone()
    if user is not None:
        username = user[1]
        bot.send_message(user_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ \n–ü—Ä–∏—á–∏–Ω–∞: {message.text}")
        bot.send_message(message.chat.id, f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \ntg://openmessage?user_id={user_id} \n–ü—Ä–∏—á–∏–Ω–∞: {message.text}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–≥–æ–π –∫–ª—É–±", callback_data="start"))
        bot.send_message(user_id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–≥–æ–π –∫–ª—É–±:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")



@bot.message_handler(content_types=['photo'])
def handle_application(message):
    user_id = message.chat.id
    username = message.chat.username
    club = selected_club.get(user_id)

    if user_id == bot.get_me().id:
        return

    with sqlite3.connect('clubs.db') as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (user_id, username, club) VALUES (?, ?, ?)",
                  (user_id, username, club))
        c.execute("UPDATE users SET username = ?, club = ? WHERE user_id = ?",
                  (username, club, user_id))
        conn.commit()

    now = time.time()
    if user_id in last_photo_time and now - last_photo_time[user_id] < 10:
        return
    last_photo_time[user_id] = now

    if club is None:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±.")
        return

    with sqlite3.connect('clubs.db') as conn:
        c = conn.cursor()
        existing_user = c.execute("SELECT * FROM user_photos WHERE user_id = ?", (message.from_user.id,)).fetchone()
        if existing_user is None:
            c.execute("INSERT INTO user_photos (user_id, photo_id) VALUES (?, ?)", (message.from_user.id, message.photo[-1].file_id))
        else:
            c.execute("UPDATE user_photos SET photo_id = ? WHERE user_id = ?", (message.photo[-1].file_id, message.from_user.id))
        conn.commit()

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_{message.from_user.id}"),
               types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω", callback_data="change_photo"))
    markup.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–ª—É–±", callback_data="change_club"))
    msg = bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?", reply_markup=markup)
    message_to_delete[message.chat.id] = msg.message_id


bot.polling()